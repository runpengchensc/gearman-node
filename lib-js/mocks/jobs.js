// Generated by CoffeeScript 1.10.0
(function() {
  var CompleteJob, DataJob, ErrorJob, EventEmitter, FailJob, MockJob, _, async,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  _ = require('underscore');

  async = require('async');

  EventEmitter = require('events').EventEmitter;

  MockJob = (function(superClass) {
    extend(MockJob, superClass);

    function MockJob() {
      this.start = bind(this.start, this);
      this.delayEmit = bind(this.delayEmit, this);
      MockJob.__super__.constructor.apply(this, arguments);
      this.handle = 'job_handle';
      this.events = [];
    }

    MockJob.prototype.delayEmit = function() {
      var args, event, timeout;
      event = arguments[0], timeout = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      return this.events.push({
        event: event,
        timeout: timeout,
        args: args
      });
    };

    MockJob.prototype.intervalEmit = function(event, timeout, data) {
      var el, i, interval, j, len, results;
      interval = Math.floor(timeout / (data.length + 1));
      results = [];
      for (i = j = 0, len = data.length; j < len; i = ++j) {
        el = data[i];
        results.push(this.delayEmit(event, (i + 1) * interval, el));
      }
      return results;
    };

    MockJob.orderEvents = function(events) {
      var pairs;
      if (!(events.length > 1)) {
        return events;
      }
      events = _(events).sortBy('timeout');
      pairs = _.zip(events, [
        {
          timeout: 0
        }
      ].concat(_.first(events, events.length - 1)));
      return _.map(pairs, function(arg) {
        var curr, prev;
        curr = arg[0], prev = arg[1];
        return _.extend({}, curr, {
          timeout: curr.timeout - prev.timeout
        });
      });
    };

    MockJob.prototype.start = function() {
      var events;
      events = this.constructor.orderEvents(this.events);
      async.forEachSeries(events, (function(_this) {
        return function(arg, cb_fe) {
          var args, event, timeout;
          event = arg.event, timeout = arg.timeout, args = arg.args;
          return setTimeout(function() {
            _this.emit.apply(_this, [event, _this.handle].concat(slice.call(args)));
            return cb_fe();
          }, timeout);
        };
      })(this), function() {});
      return this;
    };

    return MockJob;

  })(EventEmitter);

  CompleteJob = (function(superClass) {
    extend(CompleteJob, superClass);

    function CompleteJob(timeout) {
      if (timeout == null) {
        timeout = 0;
      }
      CompleteJob.__super__.constructor.apply(this, arguments);
      this.delayEmit('complete', timeout);
    }

    return CompleteJob;

  })(MockJob);

  DataJob = (function(superClass) {
    extend(DataJob, superClass);

    function DataJob(data, timeout) {
      if (timeout == null) {
        timeout = 0;
      }
      DataJob.__super__.constructor.call(this, timeout + 1);
      this.intervalEmit('data', timeout, data);
    }

    return DataJob;

  })(CompleteJob);

  FailJob = (function(superClass) {
    extend(FailJob, superClass);

    function FailJob(timeout) {
      if (timeout == null) {
        timeout = 0;
      }
      FailJob.__super__.constructor.apply(this, arguments);
      this.delayEmit('fail', timeout);
    }

    return FailJob;

  })(MockJob);

  ErrorJob = (function(superClass) {
    extend(ErrorJob, superClass);

    function ErrorJob(messages, timeout) {
      if (timeout == null) {
        timeout = 0;
      }
      ErrorJob.__super__.constructor.call(this, timeout + 1);
      this.intervalEmit('warning', timeout, messages);
    }

    return ErrorJob;

  })(FailJob);

  module.exports = {
    MockJob: MockJob,
    CompleteJob: CompleteJob,
    DataJob: DataJob,
    FailJob: FailJob,
    ErrorJob: ErrorJob
  };

}).call(this);
