// Generated by CoffeeScript 1.10.0
(function() {
  var DataWorker, DoneWorker, ErrorWorker, EventEmitter, METHODS, MockWorker, SuccessWorker, _, assert, error_on_method, error_on_methods, util,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  assert = require('assert');

  EventEmitter = require('events').EventEmitter;

  util = require('util');

  METHODS = ['warning', 'status', 'data', 'error', 'complete', 'done', 'shutdown'];

  error_on_methods = function(methods) {
    return _(methods).each(error_on_method.bind(this));
  };

  error_on_method = function(method) {
    return this.on(method, (function(_this) {
      return function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        throw new Error("Called unexpected '" + method + "' with " + args);
      };
    })(this));
  };

  MockWorker = (function(superClass) {
    extend(MockWorker, superClass);

    function MockWorker() {
      MockWorker.__super__.constructor.apply(this, arguments);
      this.received = {};
      _(METHODS).each((function(_this) {
        return function(method) {
          _this.received[method] = [];
          return _this[method] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            _this.emit.apply(_this, [method].concat(args));
            return _this.received[method].push(args);
          };
        };
      })(this));
      this.handle = "some_thing:" + (Math.floor((Math.random() * 99999) + 1));
    }

    return MockWorker;

  })(EventEmitter);

  DoneWorker = (function(superClass) {
    extend(DoneWorker, superClass);

    function DoneWorker(done_fn) {
      DoneWorker.__super__.constructor.apply(this, arguments);
      error_on_methods.call(this, _(METHODS).without('done'));
      this.on('done', done_fn);
    }

    return DoneWorker;

  })(MockWorker);

  SuccessWorker = (function(superClass) {
    extend(SuccessWorker, superClass);

    function SuccessWorker(success_fn) {
      SuccessWorker.__super__.constructor.call(this, function() {
        var err, rest;
        err = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        assert.ifError(err);
        return success_fn.apply(null, [null].concat(slice.call(rest)));
      });
    }

    return SuccessWorker;

  })(DoneWorker);

  ErrorWorker = (function(superClass) {
    extend(ErrorWorker, superClass);

    function ErrorWorker(err_fn) {
      ErrorWorker.__super__.constructor.call(this, function(err) {
        assert(err);
        return err_fn(err);
      });
    }

    return ErrorWorker;

  })(DoneWorker);

  DataWorker = (function(superClass) {
    extend(DataWorker, superClass);

    function DataWorker(done_fn) {
      var data;
      DataWorker.__super__.constructor.apply(this, arguments);
      data = [];
      error_on_methods.call(this, _(METHODS).without('done', 'data'));
      this.on('data', function(datum) {
        return data.push(datum);
      });
      this.on('done', (function(_this) {
        return function(err) {
          assert.ifError(err);
          return done_fn(null, data);
        };
      })(this));
    }

    return DataWorker;

  })(MockWorker);

  module.exports = _([DoneWorker, SuccessWorker, ErrorWorker, MockWorker, DataWorker]).chain().map(function(klass) {
    return [klass.name, klass];
  }).object().value();

}).call(this);
