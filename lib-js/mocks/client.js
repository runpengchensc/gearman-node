// Generated by CoffeeScript 1.10.0
(function() {
  var MockClient, events,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  events = require('events');

  module.exports = MockClient = (function(superClass) {
    extend(MockClient, superClass);

    function MockClient() {
      this.done = bind(this.done, this);
      this.to_intercept = {};
    }

    MockClient.prototype.intercept = function(job_name, job, assertions) {
      var base;
      if (assertions == null) {
        assertions = (function() {});
      }
      if ((base = this.to_intercept)[job_name] == null) {
        base[job_name] = [];
      }
      return this.to_intercept[job_name].push({
        job: job,
        assertions: assertions
      });
    };

    MockClient.prototype.submitJob = function(job_name, payload) {
      var ref, task;
      task = (ref = this.to_intercept[job_name]) != null ? ref.shift() : void 0;
      if (!task) {
        throw new Error("No job registered for " + job_name);
      }
      task.assertions(payload);
      return task.job.start();
    };

    MockClient.prototype.done = function() {
      var job_name, ref, results, task_list;
      ref = this.to_intercept;
      results = [];
      for (job_name in ref) {
        task_list = ref[job_name];
        if (task_list.length !== 0) {
          throw new Error("Failed to satisfy all tasks for " + job_name);
        }
      }
      return results;
    };

    return MockClient;

  })(events.EventEmitter);

}).call(this);
